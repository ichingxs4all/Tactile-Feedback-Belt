import { IAlreadyDeserialized } from "./deserialize";
import { IAlreadySerialized } from "./serialize";
export interface ICtor<T> {
    new (...args: any[]): T;
}
export interface IConstructorAlias<T> {
    name?: string;
    ctor: ICtor<T>;
    serializer?: (source: any, alreadyDeserialized: IAlreadySerialized[], serialize: (source: any, alreadySerialized: IAlreadySerialized[]) => Serialized) => any;
    deserializer?: (val: any, source: Serialized, alreadyDeserialized: IAlreadyDeserialized[], deserialize: (source: Serialized, alreadyDeserialized: IAlreadyDeserialized[]) => any) => any;
}
export interface ISerializationOptions {
    serializeSymbol?: (val: symbol) => ICustomSerializedObject;
    serializeFunction?: (val: Function) => ICustomSerializedObject;
    deserializeSymbol?: (val: string) => any;
    deserializeFunction?: (val: string) => any;
}
export declare type Primitive = string | number | boolean | undefined | null;
export interface ISymbol {
    type: "symbol";
    value: string;
}
export interface IFunction {
    type: "function";
    value: string;
}
export declare enum SerializedTypes {
    Object = 0,
    Special = 1,
    Constructed = 2,
    Custom = 3,
    Array = 4,
    Reference = 5
}
export interface IObjectLiteral {
    type: "object";
    value: {
        [key: string]: any;
    };
    id?: number;
}
export interface IBuiltIn {
    type: "builtin";
    class: "Date" | "Map" | "Set" | "RegExp";
    value: any;
    id?: number;
}
export interface IInstance {
    type: "instance";
    class: string;
    props: {
        [key: string]: Serialized;
    };
    id?: number;
}
export interface ICustomSerializedObject {
    type: "custom";
    class: string;
    id?: number;
    value: any;
}
export interface IArray {
    type: "array";
    items: Serialized[];
    id?: number;
}
export interface IReference {
    type: "reference";
    id: number;
}
export declare type Serialized = Primitive | ISymbol | IFunction | IObjectLiteral | IBuiltIn | IInstance | ICustomSerializedObject | IArray | IReference;
export declare function exception(message: string): never;
export default function (constructors?: Array<IConstructorAlias<any>>, options?: ISerializationOptions): {
    deserialize: (source: Serialized) => any;
    parse: (stringified: string) => any;
    serialize: (source: any) => Serialized;
    stringify: (source: any) => string;
};
